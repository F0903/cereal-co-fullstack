//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "order")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub shipping_name: String,
    #[sea_orm(column_type = "Text")]
    pub shipping_address: String,
    #[sea_orm(column_type = "Text")]
    pub shipping_phone: String,
    #[sea_orm(column_type = "Text")]
    pub shipping_mail: String,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))")]
    pub total: Decimal,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::order_item::Entity")]
    OrderItem,
}

impl Related<super::order_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderItem.def()
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        super::order_item::Relation::Product.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::order_item::Relation::Order.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
